{"version":3,"sources":["SectionList.tsx"],"names":["React","AnimatedSectionList","IS_IOS","useAfterMountEffect","useChainCallback","useCollapsibleStyle","useScrollHandlerY","useSharedAnimatedRef","useTabNameContext","useTabsContext","useUpdateScrollViewContentSize","SectionListMemo","memo","forwardRef","props","passRef","SectionListImpl","contentContainerStyle","style","onContentSizeChange","refreshControl","rest","name","setRef","contentInset","scrollYCurrent","ref","scrollHandler","enable","_style","_contentContainerStyle","progressViewOffset","useEffect","scrollContentSizeChange","scrollContentSizeChangeHandlers","useMemo","memoRefreshControl","cloneElement","memoContentOffset","y","value","x","memoContentInset","top","memoContentContainerStyle","memoStyle","SectionList"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,mBAAT,EAA8BC,MAA9B,QAA4C,WAA5C;AACA,SACEC,mBADF,EAEEC,gBAFF,EAGEC,mBAHF,EAIEC,iBAJF,EAKEC,oBALF,EAMEC,iBANF,EAOEC,cAPF,EAQEC,8BARF,QASO,SATP;AAWA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,gBAAGX,KAAK,CAACY,IAAN,eACtBZ,KAAK,CAACa,UAAN,CAGE,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACpB,sBAAO,oBAAC,mBAAD;AAAqB,IAAA,GAAG,EAAEA;AAA1B,KAAuCD,KAAvC,EAAP;AACD,CALD,CADsB,CAAxB;;AASA,SAASE,eAAT,CACE;AACEC,EAAAA,qBADF;AAEEC,EAAAA,KAFF;AAGEC,EAAAA,mBAHF;AAIEC,EAAAA,cAJF;AAKE,KAAGC;AALL,CADF,EAQEN,OARF,EASsB;AACpB,QAAMO,IAAI,GAAGd,iBAAiB,EAA9B;AACA,QAAM;AAAEe,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,MAA2ChB,cAAc,EAA/D;AACA,QAAMiB,GAAG,GAAGnB,oBAAoB,CAAyBQ,OAAzB,CAAhC;AAEA,QAAM;AAAEY,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA4BtB,iBAAiB,CAACgB,IAAD,CAAnD;AACAnB,EAAAA,mBAAmB,CAAC,MAAM;AACxB;AACA;AACAyB,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAJkB,CAAnB;AAMA,QAAM;AACJV,IAAAA,KAAK,EAAEW,MADH;AAEJZ,IAAAA,qBAAqB,EAAEa,sBAFnB;AAGJC,IAAAA;AAHI,MAIF1B,mBAAmB,EAJvB;AAMAL,EAAAA,KAAK,CAACgC,SAAN,CAAgB,MAAM;AACpBT,IAAAA,MAAM,CAACD,IAAD,EAAOI,GAAP,CAAN;AACD,GAFD,EAEG,CAACJ,IAAD,EAAOI,GAAP,EAAYH,MAAZ,CAFH;AAIA,QAAMU,uBAAuB,GAAGvB,8BAA8B,CAAC;AAC7DY,IAAAA;AAD6D,GAAD,CAA9D;AAIA,QAAMY,+BAA+B,GAAG9B,gBAAgB,CACtDJ,KAAK,CAACmC,OAAN,CAAc,MAAM,CAACF,uBAAD,EAA0Bd,mBAA1B,CAApB,EAAoE,CAClEA,mBADkE,EAElEc,uBAFkE,CAApE,CADsD,CAAxD;AAOA,QAAMG,kBAAkB,GAAGpC,KAAK,CAACmC,OAAN,CACzB,MACEf,cAAc,iBACdpB,KAAK,CAACqC,YAAN,CAAmBjB,cAAnB,EAAmC;AACjCW,IAAAA,kBADiC;AAEjC,OAAGX,cAAc,CAACN;AAFe,GAAnC,CAHuB,EAOzB,CAACiB,kBAAD,EAAqBX,cAArB,CAPyB,CAA3B;AASA,QAAMkB,iBAAiB,GAAGtC,KAAK,CAACmC,OAAN,CACxB,OAAO;AACLI,IAAAA,CAAC,EAAErC,MAAM,GAAG,CAACsB,YAAY,CAACgB,KAAd,GAAsBf,cAAc,CAACe,KAAxC,GAAgD,CADpD;AAELC,IAAAA,CAAC,EAAE;AAFE,GAAP,CADwB,EAKxB,CAACjB,YAAY,CAACgB,KAAd,EAAqBf,cAAc,CAACe,KAApC,CALwB,CAA1B;AAOA,QAAME,gBAAgB,GAAG1C,KAAK,CAACmC,OAAN,CAAc,OAAO;AAAEQ,IAAAA,GAAG,EAAEnB,YAAY,CAACgB;AAApB,GAAP,CAAd,EAAmD,CAC1EhB,YAAY,CAACgB,KAD6D,CAAnD,CAAzB;AAGA,QAAMI,yBAAyB,GAAG5C,KAAK,CAACmC,OAAN,CAChC,MAAM,CACJL,sBADI,EAEJ;AACAb,EAAAA,qBAHI,CAD0B,EAMhC,CAACa,sBAAD,EAAyBb,qBAAzB,CANgC,CAAlC;AAQA,QAAM4B,SAAS,GAAG7C,KAAK,CAACmC,OAAN,CAAc,MAAM,CAACN,MAAD,EAASX,KAAT,CAApB,EAAqC,CAACW,MAAD,EAASX,KAAT,CAArC,CAAlB;AAEA;AAAA;AACE;AACA,wBAAC,eAAD,eACMG,IADN;AAEE,MAAA,GAAG,EAAEK,GAFP;AAGE,MAAA,WAAW,EAAE,KAHf;AAIE,MAAA,KAAK,EAAEmB,SAJT;AAKE,MAAA,qBAAqB,EAAED,yBALzB;AAME,MAAA,kBAAkB,EAAEb,kBANtB;AAOE,MAAA,QAAQ,EAAEJ,aAPZ;AAQE,MAAA,mBAAmB,EAAEO,+BARvB;AASE,MAAA,mBAAmB,EAAE,EATvB;AAUE,MAAA,YAAY,EAAEQ,gBAVhB;AAWE,MAAA,aAAa,EAAEJ,iBAXjB;AAYE,MAAA,gCAAgC,EAAE,KAZpC;AAaE,MAAA,cAAc,EAAEF;AAblB;AAFF;AAkBD;AAED;AACA;AACA;;;AACA,OAAO,MAAMU,WAAW,gBAAG9C,KAAK,CAACa,UAAN,CAAiBG,eAAjB,CAApB","sourcesContent":["import React from 'react'\nimport { SectionList as RNSectionList, SectionListProps } from 'react-native'\n\nimport { AnimatedSectionList, IS_IOS } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\n/**\n * Used as a memo to prevent rerendering too often when the context changes.\n * See: https://github.com/facebook/react/issues/15156#issuecomment-474590693\n */\nconst SectionListMemo = React.memo(\n  React.forwardRef<\n    RNSectionList,\n    React.PropsWithChildren<SectionListProps<unknown>>\n  >((props, passRef) => {\n    return <AnimatedSectionList ref={passRef} {...props} />\n  })\n)\n\nfunction SectionListImpl<R>(\n  {\n    contentContainerStyle,\n    style,\n    onContentSizeChange,\n    refreshControl,\n    ...rest\n  }: Omit<SectionListProps<R>, 'onScroll'>,\n  passRef: React.Ref<RNSectionList>\n): React.ReactElement {\n  const name = useTabNameContext()\n  const { setRef, contentInset, scrollYCurrent } = useTabsContext()\n  const ref = useSharedAnimatedRef<RNSectionList<unknown>>(passRef)\n\n  const { scrollHandler, enable } = useScrollHandlerY(name)\n  useAfterMountEffect(() => {\n    // we enable the scroll event after mounting\n    // otherwise we get an `onScroll` call with the initial scroll position which can break things\n    enable(true)\n  })\n\n  const {\n    style: _style,\n    contentContainerStyle: _contentContainerStyle,\n    progressViewOffset,\n  } = useCollapsibleStyle()\n\n  React.useEffect(() => {\n    setRef(name, ref)\n  }, [name, ref, setRef])\n\n  const scrollContentSizeChange = useUpdateScrollViewContentSize({\n    name,\n  })\n\n  const scrollContentSizeChangeHandlers = useChainCallback(\n    React.useMemo(() => [scrollContentSizeChange, onContentSizeChange], [\n      onContentSizeChange,\n      scrollContentSizeChange,\n    ])\n  )\n\n  const memoRefreshControl = React.useMemo(\n    () =>\n      refreshControl &&\n      React.cloneElement(refreshControl, {\n        progressViewOffset,\n        ...refreshControl.props,\n      }),\n    [progressViewOffset, refreshControl]\n  )\n  const memoContentOffset = React.useMemo(\n    () => ({\n      y: IS_IOS ? -contentInset.value + scrollYCurrent.value : 0,\n      x: 0,\n    }),\n    [contentInset.value, scrollYCurrent.value]\n  )\n  const memoContentInset = React.useMemo(() => ({ top: contentInset.value }), [\n    contentInset.value,\n  ])\n  const memoContentContainerStyle = React.useMemo(\n    () => [\n      _contentContainerStyle,\n      // TODO: investigate types\n      contentContainerStyle as any,\n    ],\n    [_contentContainerStyle, contentContainerStyle]\n  )\n  const memoStyle = React.useMemo(() => [_style, style], [_style, style])\n\n  return (\n    // @ts-expect-error typescript complains about `unknown` in the memo, it should be T\n    <SectionListMemo\n      {...rest}\n      ref={ref}\n      bouncesZoom={false}\n      style={memoStyle}\n      contentContainerStyle={memoContentContainerStyle}\n      progressViewOffset={progressViewOffset}\n      onScroll={scrollHandler}\n      onContentSizeChange={scrollContentSizeChangeHandlers}\n      scrollEventThrottle={16}\n      contentInset={memoContentInset}\n      contentOffset={memoContentOffset}\n      automaticallyAdjustContentInsets={false}\n      refreshControl={memoRefreshControl}\n    />\n  )\n}\n\n/**\n * Use like a regular SectionList.\n */\nexport const SectionList = React.forwardRef(SectionListImpl) as <T>(\n  p: SectionListProps<T> & { ref?: React.Ref<RNSectionList<T>> }\n) => React.ReactElement\n"]}