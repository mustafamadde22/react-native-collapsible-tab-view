{"version":3,"sources":["ScrollView.tsx"],"names":["React","Animated","IS_IOS","useAfterMountEffect","useChainCallback","useCollapsibleStyle","useScrollHandlerY","useSharedAnimatedRef","useTabNameContext","useTabsContext","useUpdateScrollViewContentSize","ScrollViewMemo","memo","forwardRef","props","passRef","ScrollView","contentContainerStyle","style","onContentSizeChange","children","refreshControl","rest","name","ref","setRef","contentInset","scrollYCurrent","_style","_contentContainerStyle","progressViewOffset","scrollHandler","enable","useEffect","scrollContentSizeChange","scrollContentSizeChangeHandlers","useMemo","memoRefreshControl","cloneElement","memoContentOffset","y","value","x","memoContentInset","top","memoContentContainerStyle","memoStyle"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { ScrollViewProps, ScrollView as RNScrollView } from 'react-native'\nimport Animated from 'react-native-reanimated'\n\nimport { IS_IOS } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\n/**\n * Used as a memo to prevent rerendering too often when the context changes.\n * See: https://github.com/facebook/react/issues/15156#issuecomment-474590693\n */\nconst ScrollViewMemo = React.memo(\n  React.forwardRef<RNScrollView, React.PropsWithChildren<ScrollViewProps>>(\n    (props, passRef) => {\n      return (\n        <Animated.ScrollView\n          // @ts-expect-error reanimated types are broken on ref\n          ref={passRef}\n          {...props}\n        />\n      )\n    }\n  )\n)\n\n/**\n * Use like a regular ScrollView.\n */\nexport const ScrollView = React.forwardRef<\n  RNScrollView,\n  React.PropsWithChildren<Omit<ScrollViewProps, 'onScroll'>>\n>(\n  (\n    {\n      contentContainerStyle,\n      style,\n      onContentSizeChange,\n      children,\n      refreshControl,\n      ...rest\n    },\n    passRef\n  ) => {\n    const name = useTabNameContext()\n    const ref = useSharedAnimatedRef<RNScrollView>(passRef)\n    const { setRef, contentInset, scrollYCurrent } = useTabsContext()\n    const {\n      style: _style,\n      contentContainerStyle: _contentContainerStyle,\n      progressViewOffset,\n    } = useCollapsibleStyle()\n    const { scrollHandler, enable } = useScrollHandlerY(name)\n    useAfterMountEffect(() => {\n      // we enable the scroll event after mounting\n      // otherwise we get an `onScroll` call with the initial scroll position which can break things\n      enable(true)\n    })\n\n    React.useEffect(() => {\n      setRef(name, ref)\n    }, [name, ref, setRef])\n\n    const scrollContentSizeChange = useUpdateScrollViewContentSize({\n      name,\n    })\n\n    const scrollContentSizeChangeHandlers = useChainCallback(\n      React.useMemo(() => [scrollContentSizeChange, onContentSizeChange], [\n        onContentSizeChange,\n        scrollContentSizeChange,\n      ])\n    )\n\n    const memoRefreshControl = React.useMemo(\n      () =>\n        refreshControl &&\n        React.cloneElement(refreshControl, {\n          progressViewOffset,\n          ...refreshControl.props,\n        }),\n      [progressViewOffset, refreshControl]\n    )\n    const memoContentOffset = React.useMemo(\n      () => ({\n        y: IS_IOS ? -contentInset.value + scrollYCurrent.value : 0,\n        x: 0,\n      }),\n      [contentInset.value, scrollYCurrent.value]\n    )\n    const memoContentInset = React.useMemo(\n      () => ({ top: contentInset.value }),\n      [contentInset.value]\n    )\n    const memoContentContainerStyle = React.useMemo(\n      () => [\n        _contentContainerStyle,\n        // TODO: investigate types\n        contentContainerStyle as any,\n      ],\n      [_contentContainerStyle, contentContainerStyle]\n    )\n    const memoStyle = React.useMemo(() => [_style, style], [_style, style])\n\n    return (\n      <ScrollViewMemo\n        {...rest}\n        ref={ref}\n        bouncesZoom={false}\n        style={memoStyle}\n        contentContainerStyle={memoContentContainerStyle}\n        onScroll={scrollHandler}\n        onContentSizeChange={scrollContentSizeChangeHandlers}\n        scrollEventThrottle={16}\n        contentInset={memoContentInset}\n        contentOffset={memoContentOffset}\n        automaticallyAdjustContentInsets={false}\n        refreshControl={memoRefreshControl}\n      >\n        {children}\n      </ScrollViewMemo>\n    )\n  }\n)\n"]}