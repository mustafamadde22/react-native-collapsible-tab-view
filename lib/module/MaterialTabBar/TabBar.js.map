{"version":3,"sources":["TabBar.tsx"],"names":["React","StyleSheet","useWindowDimensions","Animated","cancelAnimation","scrollTo","useAnimatedReaction","useAnimatedRef","useAnimatedScrollHandler","useSharedValue","withTiming","Indicator","MaterialTabItem","TABBAR_HEIGHT","MaterialTabBar","tabNames","indexDecimal","scrollEnabled","indicatorStyle","index","TabItemComponent","getLabelText","name","String","toUpperCase","onTabPress","style","tabProps","contentContainerStyle","labelStyle","inactiveColor","activeColor","tabStyle","width","customWidth","tabBarRef","windowWidth","isFirstRender","useRef","itemLayoutGathering","Map","tabsOffset","isScrolling","nTabs","length","itemsLayout","setItemsLayout","useState","map","_","i","tabWidth","x","useEffect","current","onTabItemLayout","useCallback","event","nativeEvent","layout","set","Array","from","entries","filter","tabName","includes","sort","a","b","cancelNextScrollSync","value","onScroll","contentOffset","onBeginDrag","onMomentumEnd","currentIndexToSync","targetIndexToSync","nextIndex","canSync","halfTab","offset","styles","contentContainer","undefined","get","label","MemoizedTabBar","memo","create","flexDirection","flexWrap"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  StyleSheet,\n  useWindowDimensions,\n  LayoutChangeEvent,\n} from 'react-native'\nimport Animated, {\n  cancelAnimation,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedScrollHandler,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated'\n\nimport { TabName } from '../types'\nimport { Indicator } from './Indicator'\nimport { MaterialTabItem } from './TabItem'\nimport { MaterialTabBarProps, ItemLayout } from './types'\n\nexport const TABBAR_HEIGHT = 48\n\n/**\n * Basic usage looks like this:\n *\n * ```tsx\n * <Tabs.Container\n *   ...\n *   TabBarComponent={(props) => (\n *     <MaterialTabBar\n *       {...props}\n *       activeColor=\"red\"\n *       inactiveColor=\"yellow\"\n *       inactiveOpacity={1}\n *       labelStyle={{ fontSize: 14 }}\n *     />\n *   )}\n * >\n *   {...}\n * </Tabs.Container>\n * ```\n */\nconst MaterialTabBar = <T extends TabName = any>({\n  tabNames,\n  indexDecimal,\n  scrollEnabled = false,\n  indicatorStyle,\n  index,\n  TabItemComponent = MaterialTabItem,\n  getLabelText = (name) => String(name).toUpperCase(),\n  onTabPress,\n  style,\n  tabProps,\n  contentContainerStyle,\n  labelStyle,\n  inactiveColor,\n  activeColor,\n  tabStyle,\n  width: customWidth,\n}: MaterialTabBarProps<T>): React.ReactElement => {\n  const tabBarRef = useAnimatedRef<Animated.ScrollView>()\n  const windowWidth = useWindowDimensions().width\n  const width = customWidth ?? windowWidth\n  const isFirstRender = React.useRef(true)\n  const itemLayoutGathering = React.useRef(new Map<T, ItemLayout>())\n\n  const tabsOffset = useSharedValue(0)\n  const isScrolling = useSharedValue(false)\n\n  const nTabs = tabNames.length\n\n  const [itemsLayout, setItemsLayout] = React.useState<ItemLayout[]>(\n    scrollEnabled\n      ? []\n      : tabNames.map((_, i) => {\n          const tabWidth = width / nTabs\n          return { width: tabWidth, x: i * tabWidth }\n        })\n  )\n\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false\n    } else if (!scrollEnabled) {\n      // update items width on window resizing\n      const tabWidth = width / nTabs\n      setItemsLayout(\n        tabNames.map((_, i) => {\n          return { width: tabWidth, x: i * tabWidth }\n        })\n      )\n    }\n  }, [scrollEnabled, nTabs, tabNames, width])\n\n  const onTabItemLayout = React.useCallback(\n    (event: LayoutChangeEvent, name: T) => {\n      if (scrollEnabled) {\n        if (!event.nativeEvent?.layout) return\n        const { width, x } = event.nativeEvent.layout\n\n        itemLayoutGathering.current.set(name, {\n          width,\n          x,\n        })\n\n        // pick out the layouts for the tabs we know about (in case they changed dynamically)\n        const layout = Array.from(itemLayoutGathering.current.entries())\n          .filter(([tabName]) => tabNames.includes(tabName))\n          .map(([, layout]) => layout)\n          .sort((a, b) => a.x - b.x)\n\n        if (layout.length === tabNames.length) {\n          setItemsLayout(layout)\n        }\n      }\n    },\n    [scrollEnabled, tabNames]\n  )\n\n  const cancelNextScrollSync = useSharedValue(index.value)\n\n  const onScroll = useAnimatedScrollHandler(\n    {\n      onScroll: (event) => {\n        tabsOffset.value = event.contentOffset.x\n      },\n      onBeginDrag: () => {\n        isScrolling.value = true\n        cancelNextScrollSync.value = index.value\n      },\n      onMomentumEnd: () => {\n        isScrolling.value = false\n      },\n    },\n    []\n  )\n\n  const currentIndexToSync = useSharedValue(index.value)\n  const targetIndexToSync = useSharedValue(index.value)\n\n  useAnimatedReaction(\n    () => {\n      return index.value\n    },\n    (nextIndex) => {\n      if (scrollEnabled) {\n        cancelAnimation(currentIndexToSync)\n        targetIndexToSync.value = nextIndex\n        currentIndexToSync.value = withTiming(nextIndex)\n      }\n    },\n    [scrollEnabled]\n  )\n\n  useAnimatedReaction(\n    () => {\n      return currentIndexToSync.value === targetIndexToSync.value\n    },\n    (canSync) => {\n      if (\n        canSync &&\n        scrollEnabled &&\n        itemsLayout.length === nTabs &&\n        itemsLayout[index.value]\n      ) {\n        const halfTab = itemsLayout[index.value].width / 2\n        const offset = itemsLayout[index.value].x\n        if (\n          offset < tabsOffset.value ||\n          offset > tabsOffset.value + width - 2 * halfTab\n        ) {\n          scrollTo(tabBarRef, offset - width / 2 + halfTab, 0, true)\n        }\n      }\n    },\n    [scrollEnabled, itemsLayout, nTabs]\n  )\n  return (\n    <Animated.ScrollView\n      ref={tabBarRef}\n      horizontal\n      style={style}\n      contentContainerStyle={[\n        styles.contentContainer,\n        !scrollEnabled && { width },\n        contentContainerStyle,\n      ]}\n      keyboardShouldPersistTaps=\"handled\"\n      bounces={false}\n      alwaysBounceHorizontal={false}\n      scrollsToTop={false}\n      showsHorizontalScrollIndicator={false}\n      automaticallyAdjustContentInsets={false}\n      overScrollMode=\"never\"\n      scrollEnabled={scrollEnabled}\n      onScroll={scrollEnabled ? onScroll : undefined}\n      scrollEventThrottle={16}\n    >\n      {tabNames.map((name, i) => {\n        return (\n          <TabItemComponent\n            key={name}\n            index={i}\n            name={name}\n            label={tabProps.get(name)?.label || getLabelText(name)}\n            onPress={onTabPress}\n            onLayout={\n              scrollEnabled\n                ? (event) => onTabItemLayout(event, name)\n                : undefined\n            }\n            scrollEnabled={scrollEnabled}\n            indexDecimal={indexDecimal}\n            labelStyle={labelStyle}\n            activeColor={activeColor}\n            inactiveColor={inactiveColor}\n            style={tabStyle}\n          />\n        )\n      })}\n      {itemsLayout.length === nTabs && (\n        <Indicator\n          indexDecimal={indexDecimal}\n          itemsLayout={itemsLayout}\n          fadeIn={scrollEnabled}\n          style={indicatorStyle}\n        />\n      )}\n    </Animated.ScrollView>\n  )\n}\n\nconst MemoizedTabBar = React.memo(MaterialTabBar)\n\nexport { MemoizedTabBar as MaterialTabBar }\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n})\n"]}