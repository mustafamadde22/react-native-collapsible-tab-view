{"version":3,"sources":["TabItem.tsx"],"names":["TABBAR_HEIGHT","DEFAULT_COLOR","MaterialTabItem","name","index","onPress","onLayout","scrollEnabled","indexDecimal","label","style","labelStyle","activeLabelStyle","activeColor","inactiveColor","inactiveOpacity","pressColor","pressOpacity","Platform","OS","rest","isActive","stylez","current","Math","abs","value","opacity","Animated","Extrapolate","CLAMP","color","pressed","styles","grow","item","borderless","StyleSheet","create","flex","alignItems","justifyContent","paddingHorizontal","height","margin"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAQO,MAAMA,aAAa,GAAG,EAAtB;;AACP,MAAMC,aAAa,GAAG,kBAAtB;AAEA;AACA;AACA;;AACO,MAAMC,eAAe,GAAG,CAA0B;AACvDC,EAAAA,IADuD;AAEvDC,EAAAA,KAFuD;AAGvDC,EAAAA,OAHuD;AAIvDC,EAAAA,QAJuD;AAKvDC,EAAAA,aALuD;AAMvDC,EAAAA,YANuD;AAOvDC,EAAAA,KAPuD;AAQvDC,EAAAA,KARuD;AASvDC,EAAAA,UATuD;AAUvDC,EAAAA,gBAVuD;AAWvDC,EAAAA,WAAW,GAAGZ,aAXyC;AAYvDa,EAAAA,aAAa,GAAGb,aAZuC;AAavDc,EAAAA,eAAe,GAAG,GAbqC;AAcvDC,EAAAA,UAAU,GAAG,SAd0C;AAevDC,EAAAA,YAAY,GAAGC,sBAASC,EAAT,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CAfY;AAgBvD,KAAGC;AAhBoD,CAA1B,KAiBoB;AACjD,QAAMC,QAAQ,GAAG,mBAAgB,KAAhB,CAAjB;AACA,QAAMC,MAAM,GAAG,6CAAiB,MAAM;AACpCD,IAAAA,QAAQ,CAACE,OAAT,GAAmBC,IAAI,CAACC,GAAL,CAASrB,KAAK,GAAGI,YAAY,CAACkB,KAA9B,IAAuC,GAA1D;AACA,WAAO;AACLC,MAAAA,OAAO,EAAE,wCACPnB,YAAY,CAACkB,KADN,EAEP,CAACtB,KAAK,GAAG,CAAT,EAAYA,KAAZ,EAAmBA,KAAK,GAAG,CAA3B,CAFO,EAGP,CAACW,eAAD,EAAkB,CAAlB,EAAqBA,eAArB,CAHO,EAIPa,+BAASC,WAAT,CAAqBC,KAJd,CADJ;AAOLC,MAAAA,KAAK,EACHP,IAAI,CAACC,GAAL,CAASrB,KAAK,GAAGI,YAAY,CAACkB,KAA9B,IAAuC,GAAvC,GACIb,WADJ,GAEIC;AAVD,KAAP;AAYD,GAdc,CAAf;AAgBA,sBACE,6BAAC,sBAAD;AACE,IAAA,QAAQ,EAAER,QADZ;AAEE,IAAA,KAAK,EAAE,CAAC;AAAE0B,MAAAA;AAAF,KAAD,KAAiB,CACtB;AAAEL,MAAAA,OAAO,EAAEK,OAAO,GAAGf,YAAH,GAAkB;AAApC,KADsB,EAEtB,CAACV,aAAD,IAAkB0B,MAAM,CAACC,IAFH,EAGtBD,MAAM,CAACE,IAHe,EAItBzB,KAJsB,CAF1B;AAQE,IAAA,OAAO,EAAE,MAAML,OAAO,CAACF,IAAD,CARxB;AASE,IAAA,cAAc,EAAE;AACdiC,MAAAA,UAAU,EAAE,IADE;AAEdL,MAAAA,KAAK,EAAEf;AAFO;AATlB,KAaMI,IAbN,gBAeE,6BAAC,8BAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLa,MAAM,CAACxB,KADF,EAELa,MAFK,EAGLX,UAHK,EAILU,QAAQ,GAAGT,gBAAH,GAAsB,IAJzB;AADT,KAQGH,KARH,CAfF,CADF;AA4BD,CA/DM;;;;AAiEP,MAAMwB,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BJ,EAAAA,IAAI,EAAE;AACJK,IAAAA,IAAI,EAAE;AADF,GADyB;AAI/BJ,EAAAA,IAAI,EAAE;AACJK,IAAAA,UAAU,EAAE,QADR;AAEJC,IAAAA,cAAc,EAAE,QAFZ;AAGJC,IAAAA,iBAAiB,EAAE,EAHf;AAIJC,IAAAA,MAAM,EAAE3C;AAJJ,GAJyB;AAU/BS,EAAAA,KAAK,EAAE;AACLmC,IAAAA,MAAM,EAAE;AADH;AAVwB,CAAlB,CAAf","sourcesContent":["import React, { useRef } from 'react'\nimport { StyleSheet, Pressable, Platform } from 'react-native'\nimport Animated, {\n  interpolate,\n  useAnimatedStyle,\n} from 'react-native-reanimated'\n\nimport { TabName } from '../types'\nimport { MaterialTabItemProps } from './types'\n\nexport const TABBAR_HEIGHT = 48\nconst DEFAULT_COLOR = 'rgba(0, 0, 0, 1)'\n\n/**\n * Any additional props are passed to the pressable component.\n */\nexport const MaterialTabItem = <T extends TabName = any>({\n  name,\n  index,\n  onPress,\n  onLayout,\n  scrollEnabled,\n  indexDecimal,\n  label,\n  style,\n  labelStyle,\n  activeLabelStyle,\n  activeColor = DEFAULT_COLOR,\n  inactiveColor = DEFAULT_COLOR,\n  inactiveOpacity = 0.7,\n  pressColor = '#DDDDDD',\n  pressOpacity = Platform.OS === 'ios' ? 1 : 1,\n  ...rest\n}: MaterialTabItemProps<T>): React.ReactElement => {\n  const isActive = useRef<boolean>(false)\n  const stylez = useAnimatedStyle(() => {\n    isActive.current = Math.abs(index - indexDecimal.value) < 0.5\n    return {\n      opacity: interpolate(\n        indexDecimal.value,\n        [index - 1, index, index + 1],\n        [inactiveOpacity, 1, inactiveOpacity],\n        Animated.Extrapolate.CLAMP\n      ),\n      color:\n        Math.abs(index - indexDecimal.value) < 0.5\n          ? activeColor\n          : inactiveColor,\n    }\n  })\n\n  return (\n    <Pressable\n      onLayout={onLayout}\n      style={({ pressed }) => [\n        { opacity: pressed ? pressOpacity : 1 },\n        !scrollEnabled && styles.grow,\n        styles.item,\n        style,\n      ]}\n      onPress={() => onPress(name)}\n      android_ripple={{\n        borderless: true,\n        color: pressColor,\n      }}\n      {...rest}\n    >\n      <Animated.Text\n        style={[\n          styles.label,\n          stylez,\n          labelStyle,\n          isActive ? activeLabelStyle : null,\n        ]}\n      >\n        {label}\n      </Animated.Text>\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  grow: {\n    flex: 1,\n  },\n  item: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n    height: TABBAR_HEIGHT,\n  },\n  label: {\n    margin: 4,\n  },\n})\n"]}